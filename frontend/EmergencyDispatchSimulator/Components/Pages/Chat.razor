@page "/chat"

@implements IAsyncDisposable

@inject Api.IEdsApi EdsApi
@inject IDialogService DialogService
@inject ChatWebSocketService ChatService
@inject IJSRuntime JS
@inject NavigationManager Navigation


<div class="mud-full-width d-flex flex-column align-center justify-space-between" style="height: 85vh">
    @if (_loading)
    {
        <MudSkeleton SkeletonType="SkeletonType.Rectangle" Animation="Animation.Wave" Height="80%" Width="80%"/>
        <div class="d-flex flex-row align-center gap-10">
            <MudSkeleton SkeletonType="SkeletonType.Rectangle" Animation="Animation.Wave" Height="64px" Width="64px"/>
            <MudSkeleton SkeletonType="SkeletonType.Rectangle" Animation="Animation.Wave" Height="64px" Width="64px"/>
        </div>
    }
    else
    {
        if (ChatService.IsConnected)
        {
            <NavigationLock OnBeforeInternalNavigation="ConfirmNavigation" ConfirmExternalNavigation />
            
            <div class="d-flex align-center justify-center" style="height: 80%; width: 80%">
                @if (_audioPlaying)
                {
                    <img src="audio-wave.gif" alt="audio" style="min-height: 300px; min-width: 300px; width: 100%" />
                }
                else
                {
                    <MudDivider />
                }
            </div>
            
            <div class="d-flex flex-row align-center gap-10">
                <AudioRecordButton OnNewRecording="HandleOutgoingMessage" Disabled="_audioPlaying" />
                <MudTooltip Text="End Call" Placement="Placement.Top" Arrow>
                    <MudIconButton Class="pa-4" OnClick="EndCall" Icon="@Icons.Material.Rounded.CallEnd" Color="Color.Error" Variant="Variant.Filled" Size="Size.Large"/>
                </MudTooltip>
            </div>
        }
        else
        {
            <MudAlert Severity="Severity.Error">There was a problem connecting to the simulator</MudAlert>
        }
    }
</div>


@code {

    private bool _loading = true;
    private bool _audioPlaying;
    private bool _forceNav;

    private DotNetObjectReference<Chat>? _dotNetRef;
    private IJSObjectReference? _jsModule;
    private bool _jsInitialized;

    protected override async Task OnInitializedAsync()
    {
        // Subscribe to the service's event to receive messages
        ChatService.MessageReceived += HandleIncomingMessage;
        ChatService.StatusChanged += Console.WriteLine;
        // Attempt connection
        await ChatService.ConnectAsync();

        _loading = false;
        StateHasChanged();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!_jsInitialized)
        {
            _jsInitialized = true;
            try
            {
                _jsModule = await JS.InvokeAsync<IJSObjectReference>("import", "./Components/Pages/Chat.razor.js");
                _dotNetRef = DotNetObjectReference.Create(this);
                await _jsModule.InvokeVoidAsync("initialize", _dotNetRef);
            }
            catch (Exception e)
            {
                Console.WriteLine(e);
            }
        }
    }

    
    private async Task HandleOutgoingMessage(string b64Wav)
    {
        // TODO:
        await ChatService.SendAsync(b64Wav);
    }

    private async Task HandleIncomingMessage(string b64Wav)
    {
        // TODO:
        _audioPlaying = true;
        await _jsModule!.InvokeVoidAsync("playB64Wav", b64Wav);
        await InvokeAsync(StateHasChanged);
    }

    private async Task ConfirmNavigation(LocationChangingContext context)
    {
        if (_forceNav)
            return;
        
        var confirm = await DialogService.ShowMessageBox(
            "Confirm",
            "You are in an active call. Are you sure you want to leave?",
            yesText: "Leave",
            cancelText: "Stay"
        );
        
        if (confirm != true)
            context.PreventNavigation();
    }


    private async Task EndCall()
    {
        // TODO

        _forceNav = true;
        Navigation.NavigateTo("/summary");
    }


    [JSInvokable]
    public async Task OnAudioStopped()
    {
        _audioPlaying = false;
        await InvokeAsync(StateHasChanged);
    }


    public async ValueTask DisposeAsync()
    {
        ChatService.MessageReceived -= HandleIncomingMessage;
        ChatService.StatusChanged -= Console.WriteLine;
        
        _dotNetRef?.Dispose();
        if (_jsModule is not null)
            await _jsModule.DisposeAsync();
    }
}