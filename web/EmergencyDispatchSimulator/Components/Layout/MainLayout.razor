@inherits LayoutComponentBase

@inject ILocalStorageService LocalStorage


<MudThemeProvider Theme="_theme" IsDarkMode="_isDarkMode" IsDarkModeChanged="DarkModeChanged" />
<MudPopoverProvider />
<MudDialogProvider />
<MudSnackbarProvider />

<MudLayout>
    <MudAppBar Elevation="1">
        <MudButton StartIcon="@Icons.Material.Filled.EmergencyShare" Color="Color.Inherit" Href="/" Variant="Variant.Text">EMERGENCY DISPATCH SIMULATOR</MudButton>
        <MudSpacer/>
        <MudIconButton Icon="@Icons.Custom.Brands.GitHub" Color="Color.Inherit" Href="https://github.com/RishiDinesh/emergency-dispatch-simulator" Target="_blank" />
        <MudIconButton Icon="@(_isDarkMode ? Icons.Material.Filled.DarkMode : Icons.Material.Filled.LightMode)" Color="Color.Inherit" OnClick="_ => DarkModeChanged(!_isDarkMode)"/>
    </MudAppBar>
    <MudMainContent>
        <div class="pa-4">
            @Body
        </div>
    </MudMainContent>
</MudLayout>

<div id="blazor-error-ui" data-nosnippet>
    An unhandled error has occurred.
    <a href="." class="reload">Reload</a>
    <span class="dismiss">🗙</span>
</div>

@code {

    private bool _isDarkMode;

    private MudTheme _theme = new MudTheme()
    {
        PaletteDark = new()
        {
            Surface = "#191919",
            Background = "#191919",
            DrawerBackground = "#191919",
            DrawerText = "#E0E0E0",
            DrawerIcon = "#E0E0E0",
            AppbarBackground = "#111111",
        },
        LayoutProperties = new LayoutProperties()
        {
            DefaultBorderRadius = "10px",
            AppbarHeight = "45px",
        }
    };

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _isDarkMode = await LocalStorage.GetItemAsync<bool>("IsDarkMode");
            StateHasChanged();
        }
    }

    private async Task DarkModeChanged(bool isDarkMode)
    {
        if (isDarkMode == _isDarkMode)
            return;

        _isDarkMode = isDarkMode;
        try
        {
            await LocalStorage.SetItemAsync("IsDarkMode", isDarkMode);
        }
        catch
        {
        }
    }

}