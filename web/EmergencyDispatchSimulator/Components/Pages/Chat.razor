@page "/chat"

@implements IDisposable

@inject Api.IEdsApi EdsApi
@inject IDialogService DialogService
@inject ChatWebSocketService ChatService


<div class="mud-full-width d-flex flex-column align-center justify-space-between" style="height: 85vh">
    @if (_loading)
    {
        <MudSkeleton SkeletonType="SkeletonType.Rectangle" Animation="Animation.Wave" Height="80%" Width="80%"/>
        <div class="d-flex flex-row align-center gap-10">
            <MudSkeleton SkeletonType="SkeletonType.Rectangle" Animation="Animation.Wave" Height="64px" Width="64px"/>
            <MudSkeleton SkeletonType="SkeletonType.Rectangle" Animation="Animation.Wave" Height="64px" Width="64px"/>
        </div>
    }
    else
    {
        if (ChatService.IsConnected)
        {
            <NavigationLock OnBeforeInternalNavigation="ConfirmNavigation" ConfirmExternalNavigation />
            
            <MudSkeleton SkeletonType="SkeletonType.Rectangle" Animation="Animation.Wave" Height="80%" Width="80%"/>
            <div class="d-flex flex-row align-center gap-10">
                <AudioRecordButton OnNewRecording="HandleOutgoingMessage" />
                <MudTooltip Text="End Call" Placement="Placement.Top" Arrow>
                    <MudIconButton Class="pa-4" Icon="@Icons.Material.Rounded.CallEnd" Color="Color.Error" Variant="Variant.Filled" Size="Size.Large"/>
                </MudTooltip>
            </div>
        }
        else
        {
            <MudAlert Severity="Severity.Error">There was a problem connecting to the simulator</MudAlert>
        }
    }
</div>


@code {

    private bool _loading = true;

    protected override async Task OnInitializedAsync()
    {
        // Subscribe to the service's event to receive messages
        ChatService.MessageReceived += HandleIncomingMessage;
        ChatService.StatusChanged += Console.WriteLine;
        // Attempt connection
        await ChatService.ConnectAsync();

        _loading = false;
        StateHasChanged();
    }

    
    private async Task HandleOutgoingMessage(string b64Wav)
    {
        // TODO:
        await ChatService.SendAsync(b64Wav);
    }

    private async Task HandleIncomingMessage(string b64Wav)
    {
        // TODO:
    }

    private async Task ConfirmNavigation(LocationChangingContext context)
    {
        var confirm = await DialogService.ShowMessageBox(
            "Confirm",
            "You are in an active call. Are you sure you want to leave?",
            yesText: "Leave",
            cancelText: "Stay"
        );
        
        if (confirm != true)
            context.PreventNavigation();
    }


    public void Dispose()
    {
        ChatService.MessageReceived -= HandleIncomingMessage;
        ChatService.StatusChanged -= Console.WriteLine;
    }
}