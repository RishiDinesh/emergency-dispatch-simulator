@page "/chat"

@implements IDisposable

@inject Api.IEdsApi EdsApi
@inject IDialogService DialogService


<div class="mud-full-width d-flex flex-column align-center justify-space-between" style="height: 85vh">
    @if (_loading)
    {
        <MudSkeleton SkeletonType="SkeletonType.Rectangle" Animation="Animation.Wave" Height="80%" Width="80%"/>
        <div class="d-flex flex-row align-center gap-10">
            <MudSkeleton SkeletonType="SkeletonType.Rectangle" Animation="Animation.Wave" Height="64px" Width="64px"/>
            <MudSkeleton SkeletonType="SkeletonType.Rectangle" Animation="Animation.Wave" Height="64px" Width="64px"/>
        </div>
    }
    else
    {
        <NavigationLock OnBeforeInternalNavigation="ConfirmNavigation" ConfirmExternalNavigation />
        
        <MudSkeleton SkeletonType="SkeletonType.Rectangle" Animation="Animation.Wave" Height="80%" Width="80%"/>
        <div class="d-flex flex-row align-center gap-10">
            <AudioRecordButton OnNewRecording="HandleOutgoingMessage" />
            <MudTooltip Text="End Call" Placement="Placement.Top" Arrow>
                <MudIconButton Class="pa-4" Icon="@Icons.Material.Rounded.CallEnd" Color="Color.Error" Variant="Variant.Filled" Size="Size.Large"/>
            </MudTooltip>
        </div>
    }
</div>


@code {

    private bool _loading = true;
    private bool _chatInitialized;

    protected override async Task OnInitializedAsync()
    {
        // TODO: initialize web socket
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!_chatInitialized)
        {
            _chatInitialized = true;
            await Task.Delay(1000);
            _loading = false;
            StateHasChanged();
        }
    }


    private void HandleOutgoingMessage(string b64Wav)
    {
        // TODO:
    }

    private void HandleIncomingMessage(string message)
    {
        // TODO:
    }

    private async Task ConfirmNavigation(LocationChangingContext context)
    {
        var confirm = await DialogService.ShowMessageBox(
            "Confirm",
            "You are in an active call. Are you sure you want to leave?",
            yesText: "Leave",
            cancelText: "Stay"
        );
        
        if (confirm != true)
            context.PreventNavigation();
    }


    public void Dispose()
    {
        // ChatWebSocket.MessageReceived -= HandleNewMessage;
    }
}